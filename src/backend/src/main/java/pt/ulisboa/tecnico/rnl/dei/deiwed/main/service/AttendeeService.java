package pt.ulisboa.tecnico.rnl.dei.deiwed.main.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pt.ulisboa.tecnico.rnl.dei.deiwed.exceptions.DeiwedException;
import pt.ulisboa.tecnico.rnl.dei.deiwed.exceptions.ErrorMessage;
import pt.ulisboa.tecnico.rnl.dei.deiwed.main.dto.AttendeeDto;
import pt.ulisboa.tecnico.rnl.dei.deiwed.main.entity.Attendee;
import pt.ulisboa.tecnico.rnl.dei.deiwed.main.repository.AttendeeRepository;

@Service
@Transactional
public class AttendeeService {
	@Autowired
	private AttendeeRepository attendeeRepository;

	private Attendee fetchAttendeeOrThrow(long id) {
		return attendeeRepository.findById(id)
				.orElseThrow(() -> new DeiwedException(ErrorMessage.NO_SUCH_ATTENDEE, Long.toString(id)));
	}

	public List<AttendeeDto> getAllAttendees() {
		return attendeeRepository.findAll().stream()
				.map(AttendeeDto::new)
				.collect(Collectors.toList());
	}

	public AttendeeDto createAttendee(AttendeeDto attendeeDto) {
		Attendee attendee = new Attendee(attendeeDto);
		attendee.setId(null); // to ensure that the id is generated by the database
		return new AttendeeDto(attendeeRepository.save(attendee));
	}

	public AttendeeDto getAttendee(long id) {
		return new AttendeeDto(fetchAttendeeOrThrow(id));
	}

	public AttendeeDto updateAttendee(long id, AttendeeDto attendeeDto) {
		fetchAttendeeOrThrow(id); // ensure exists

		// FIXME: hmmm, updateAttendee and createAttendee are very similar
		// maybe we should refactor this? have a
		// `private AttendeeDto something(Long id, AttendeeDto attendeeDto)` method?
		Attendee attendee = new Attendee(attendeeDto);
		attendee.setId(id);
		return new AttendeeDto(attendeeRepository.save(attendee));
	}

	public void deleteAttendee(long id) {
		fetchAttendeeOrThrow(id); // ensure exists

		attendeeRepository.deleteById(id);
	}
}
